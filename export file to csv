Exporting a Python `map` object to a CSV file involves a few steps, as the `map` object itself is an iterator that generates items on-the-fly. You'll need to convert it into a list or another iterable structure first. Here's a step-by-step guide:

### 1. Convert the `map` Object to a List

First, you need to convert the `map` object to a list so that you can work with it easily.

```python
map_object = map(some_function, iterable)
list_data = list(map_object)
```

### 2. Prepare Data for CSV

If the `map` object generates tuples or lists, you can directly write them to a CSV file. If it generates single values, you might need to format them accordingly.

### 3. Write to CSV File

Use Python’s built-in `csv` module to write the data to a CSV file.

Here’s a complete example:

```python
import csv

# Example function and iterable
def some_function(x):
    return (x, x**2, x**3)  # Example: returns a tuple (x, x^2, x^3)

iterable = range(5)
map_object = map(some_function, iterable)

# Convert map object to list
list_data = list(map_object)

# Define CSV file name
csv_file = 'output.csv'

# Write to CSV file
with open(csv_file, 'w', newline='') as file:
    writer = csv.writer(file)
    # Write header (optional)
    writer.writerow(['Value', 'Square', 'Cube'])
    # Write data rows
    writer.writerows(list_data)

print(f"Data has been written to {csv_file}")
```

### Explanation:

1. **Convert the `map` Object:** Convert it to a list so you can handle it more easily.
2. **Open a CSV File:** Use `open()` with mode `'w'` to write to the file. The `newline=''` argument prevents extra newlines on some platforms.
3. **Create a CSV Writer:** Use `csv.writer()` to handle writing data.
4. **Write Header (Optional):** You can write a header row to label the columns.
5. **Write Data Rows:** Use `writer.writerows()` to write the data.

This process will export the data generated by the `map` object to a CSV file named `output.csv`. Adjust the `some_function` and `iterable` as per your specific requirements.
